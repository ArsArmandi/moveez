trigger:
  batch: true
  branches:
    include:
    - refs/heads/*
  paths:
    include: 
    - services/ketchup/

variables:
  registryServerName: '$(registryName).azurecr.io'
  imageName: '$(projectName)'
  # define 5 more variables: projectName, tenantId, registryName, registryLogin and registryPassword in the build pipeline in UI

jobs:
- job: Build
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: docker build -f $(system.defaultWorkingDirectory)/services/$(projectName)/Dockerfile -t $(registryServerName)/$(imageName):$(build.BuildNumber)_$(build.sourceBranchName) -t $(registryServerName)/$(imageName):latest $(system.defaultWorkingDirectory)/services/$(projectName)
    displayName: 'docker build'

  - bash: docker login $(registryServerName) -u $(registryLogin) -p $(registryPassword)
    displayName: 'docker login'

  - bash: |
      docker push $(registryServerName)/$(imageName):$(build.BuildNumber)_$(build.sourceBranchName)
      docker push $(registryServerName)/$(imageName):latest
    displayName: 'docker push'
    #condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

  - task: HelmInstaller@0
    displayName: 'Install Helm'
    inputs:
      helmVersion: 2.13.0

  - bash: sed -i 's/$(projectName)/$(projectName)_$(build.sourceBranchName)/g' $(system.defaultWorkingDirectory)/services/$(projectName)/charts/$(projectName)/Chart.yaml
    displayName: 'update Chart.yaml with branch name'

  - bash: mv $(system.defaultWorkingDirectory)/services/$(projectName)/charts/$(projectName) $(system.defaultWorkingDirectory)/services/$(projectName)/charts/$(projectName)_$(build.sourceBranchName)
    displayName: 'renaming chart folder to match Chart.yaml name'

  - bash: helm package --version $(build.BuildNumber) --destination $(build.artifactStagingDirectory) $(system.defaultWorkingDirectory)/services/$(projectName)/charts/$(projectName)_$(build.sourceBranchName)
    displayName: 'helm package'
    
  - bash: az acr helm push -n $(registryName) -u $(registryLogin) -p $(registryPassword) $(build.artifactStagingDirectory)/$(projectName)_$(build.sourceBranchName)-$(build.BuildNumber).tgz
    displayName: 'az acr helm push'
    #condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

- job: SonarCloud
  pool:
    vmImage: 'ubuntu-16.04'
    demands: java

  steps:
  - task: Npm@1
    displayName: 'npm install (dependencies)'
    inputs:
      workingDir: 'services/$(projectName)'
      verbose: false

  - task: Npm@1
    displayName: 'npm test (unit)'
    inputs:
      command: custom
      workingDir: 'services/$(projectName)'
      verbose: false
      customCommand: test

  - bash: cd services/ketchup/coverage && ls
    displayName: 'Bash Script'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage from istanbul via cobertura'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: 'cobertura-coverage.xml'
      reportDirectory: services/ketchup/coverage
      
  - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
    displayName: 'Prepare analysis on SonarCloud'
    inputs:
      SonarCloud: azuredevops
      organization: 'schdief-github'
      scannerMode: CLI
      configMode: manual
      cliProjectKey: 'schdief:moveez-ketchup'
      cliProjectName: 'moveez-ketchup'
      cliSources: services/ketchup

  - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
    displayName: 'Run Code Analysis'

  - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
    displayName: 'Publish Quality Gate Result'